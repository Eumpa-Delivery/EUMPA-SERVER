# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Spring Boot & Gradle CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    # Task의 sequence를 명시한다.
    steps:
      - uses: actions/checkout@v3

      # 환경변수 파일 생성
      - name: Generate Environment Variable File
        run: |
          mkdir ./src/main/resources
          touch ./src/main/resources/application.properties
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties
          cat ./src/main/resources/application.properties       

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

#      - name: Build with Gradle
#        uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
#        with:
#          arguments: build

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build
      - name: Build with Gradle
        run: ./gradlew clean build

      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir deploy

      # Jar 파일 Copy
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy/

#      - name: Deploy
#        run: java -jar ./build/libs/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
#      - name: Setup SSH
#        uses: webfactory/ssh-agent@v0.5.4
#        with:
#          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
#
#      - name: SCP transfer
#        run: scp ./deploy/*-SNAPSHOT.jar ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.SSH_USER }}/server/
#
#      - name: Execute remote commands
#        run: |
#          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} "sudo fuser -k 8080/tcp"
#          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} "sudo nohup java -jar /home/${{ secrets.SSH_USER }}/server/*.jar &"

      - name: ssh connection
        uses: cross-the-world/ssh-pipelines@latest
        with:
            host: ${{ secrets.SERVER_HOST }}
            user: ${{ secrets.SSH_USER }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            scp: |
              ./deploy/*-SNAPSHOT.jar => /home/${{ secrets.SSH_USER }}/server/
            script: |
              cd /home/${{ secrets.SSH_USER }}/server/
              sudo -S sh -c "nohup java -jar *-SNAPSHOT.jar &" <<< "${{ secrets.SSH_PRIVATE_KEY }}"