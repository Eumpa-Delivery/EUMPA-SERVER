# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Spring Boot & Gradle CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    # Task의 sequence를 명시한다.
    steps:
      - uses: actions/checkout@v3

      # 환경변수 파일 생성
      - name: Generate Environment Variable File
        run: |
          mkdir ./src/main/resources
          touch ./src/main/resources/application.properties
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties
          cat ./src/main/resources/application.properties       

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build
      - name: Build with Gradle
        run: ./gradlew clean build

      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir deploy

      # Jar 파일 Copy
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy/

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: eumpa
          path: build/libs/*.jar

      - name: Upload script
        uses: actions/upload-artifact@v2
        with:
          name: eumpa
          path: scripts/*.sh

      # Transfer jar file to deploy dir
#      - name: Deploy Prod use SCP
#        uses: appleboy/scp-action@v0.1.7
#        with:
#          username: ${{ secrets.USERNAME }}
#          host: ${{ secrets.HOST }}
#          password: ${{ secrets.PASSWORD }}
#          source: "./build/libs/*.jar"
#          target: "/home/ubuntu/deploy"
#          strip_components: 2

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: eumpa

      - name: Operations
        uses: alinz/ssh-scp-action@master
        env:
          HELLO: cool
          MESSAGE: hello world
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.SERVER_HOST }}
          port: 22
          user: ${{ secrets.USER }}
          # runs this on remove server
          ssh_before: |
            rm -rf *-SNAPSHOT.jar *.sh
            echo $HELLO
            echo $MESSAGE

          # then uploads these 2 files
          scp: |
            *-SNAPSHOT.jar ${{ secrets.USER }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.USER }}/deploy/
            *.sh ${{ secrets.USER }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.USER }}/deploy/

          # then run these commands
          ssh_after: |
            cd /home/${{secrets.USER}}/deploy/
            chmod +x deploy.sh && sh deploy.sh

#
#      - name: Setup SSH
#        uses: webfactory/ssh-agent@v0.8.0
#        with:
#            ssh-private-key: ${{ secrets.SSH_KEY }}

#      - name: scp-pipeline
#        uses: cross-the-world/scp-pipeline@v1.2.1
#        with:
#          host: ${{secrets.HOST}}
#          user: ${{secrets.USER}}
#          key: ${{secrets.KEY}}
#          connect_timeout: 10s
#          local: './deploy/*'
#          remote: /home/${{secrets.USER}}/deploy/
#          scp: |
#            ./deploy/*-SNAPSHOT.jar => "/home/${{secrets.USER}}/deploy/"
#
#      - name: ssh connection
#        uses: cross-the-world/ssh-pipeline@master
#        with:
#          host: ${{secrets.HOST}}
#          user: ${{secrets.USER}}
#          key: ${{secrets.KEY}}
#          script: |
#            cd /home/${{secrets.USER}}/deploy/
#            chmod +x deploy.sh && sh deploy.sh

#      - name: Transfer Deploy Script use SCP
#        uses: appleboy/scp-action@v0.1.7
#        with:
#          username: ${{ secrets.USERNAME }}
#          host: ${{ secrets.HOST }}
#          password: ${{ secrets.PASSWORD }}
#          source: "scripts/deploy.sh"
#          target: "/home/ubuntu/deploy"

#      - name: Execute Server Init Script
#        uses: appleboy/ssh-action@v1.0.2
#        with:
#          username: ${{ secrets.USERNAME }}
#          host: ${{ secrets.HOST }}
#          password: ${{ secrets.PASSWORD }}
#          script_stop: true
#          script: chmod +x /home/ubuntu/deploy/deploy.sh && sh /home/ubuntu/deploy/deploy.sh